number_of_items: 30 # The number of items of the knapsacks considered. Used in the files ('knapsackGenerationAndSolution') and ('hashingKnapsacks') and ('ksretrieval.py').
capacity: 1 # Used on the file ('knapsackGenerationAndSolution').
timeout: 100 # The maximum time (in seconds) that the implemented BnB function can take to generate a solution. If an exact solution is not obtained in this amount of time, then an approximate solution (whatver its quality) is provided (if the function has been able to obtain a feasible solution). Used on the file ('knapsackGenerationAndSolution').
max_value: 1 # The maximum of the values of each object in the considered knapsack problems. Used on the file ('knapsackGenerationAndSolution').
numbasevalues: 30 # The number of values in the base list from which we generate the list of weights and values for the n items of the generated knapsacks. Used on the file ('knapsackGenerationAndSolution'). 
readKnapsacks: False # Whether knapsacks should be read from file (True) or generated in the script (False). This parameter is used in the file ('knapsackGenerationAndSolution').
usegurobi: True # Whether we use gurobi (True) or our own BnB algorithm to obtain the solver based solutions to the knapsacks. Used on the file ('knapsackGenerationAndSolution').
number_of_instances: 90000 # The number of knapsacks to be generated in order to train the learning algorithm. Used in the files (knapsackGenerationAndSolution.py) and (ksretrieval.py)
b: 12 # The number of bits used in the hashes. Used in the files ('hashingKnapsacks.py') and (ksretrieval.py)
lper: 1 # The lower percentile of the distances between some pairs to be used in the algorithm that learns the Mahalanobis metric. Used in the file ('hashingKnapsacks.py').
uper: 99 # The higher percentile of the distances between a set of pairs to be used in the algorithm that learns the Mahalanobis metric. Used in the file ('hashingKnapsacks.py').
tSim: 1 # $ (i,j) \in S \iff dHamming(x_i,x_j) <= tSim $ The threshold (threshold in Hamming distances) of similarity between 2 knapsacks. Used in the file ('hashingKnapsacks.py').
gamma: 0.1 # The slack variable parameter (in the ITML paper they refer experimenting with gamma = 0.01, 0.1, 1, 10). Used in the file ('hashingKnapsacks.py').
tol: 0.01 # The tolerance considered in the iterative algorithm that learns the Mahalanobis matrix. When the difference between 2 certain quantities is less than tol we consider that the algorithm converged. Used in the file ('hashingKnapsacks.py').
niterations: 100000 # The max number of iterations in the iterative algorithm that learns the Mahalanobis matrix A. Achieved if tol threshold is not met before. Used in the file ('hashingKnapsacks.py').
readX: True # A flag that signals whether the matrix X (this matrix has the feature vectors of all the pre-solved knapsacks as its columns) should be read from file or generated in the code. Used in the file ('hashingKnapsacks.py').
num_knapsack_pairs: 5000 # The total number of pairs of knapsacks considered (among the set of pre solved knapsacks). These pairs are randomly sampled from all the possible combinations of 2 knapsacks. Used in the files ('hashingKnapsacks.py') and ('ksretrieval.py').
number_of_queryknapsacks: 100 # Number of query knaspsacks to generate and for retrieval of the corresponding approximate nearest neighbors. Used in the file ('ksretrieval.py').
nper: 100 # The number of permutations used, unless b! is smaller (in this case the number of permutations used is b!). Used in the file ('ksretrieval.py').  
read_permutations: True # A flag that signals whether the permutations should be read from file or generated in the code. Used in the file ('ksretrieval.py').